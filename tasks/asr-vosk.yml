# SPDX-FileCopyrightText: 2023-2024 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/asr-vosk.yml

# Automatic Speech Recognition using third-party Vosk for Asterisk modules

# TODO
# - name: Setup kaldi docker.

# TODO
# - name: Provide helper dial plan for Vosk (maybe extensions_pngnpbx_hh.conf)

- name: Make a place for the Vosk source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.tempfile:
    suffix: ".vosk-asterisk"
    state: directory
  register: tmpvsk

- name: Download Vosk.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.get_url:
    url: "{{ pngnx_vosk_asterisk_urlbase }}"
    dest: "{{ tmpvsk.path }}/{{ pngnx_vosk_asterisk_zip }}"
    mode: "0500"

- name: Unarchive Vosk.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.unarchive:
    src: "{{ tmpvsk.path }}/{{ pngnx_vosk_asterisk_zip }}"
    dest: "{{ tmpvsk.path }}"
    remote_src: true

- name: Backup existing source directory (if any.)
  become: true
  when: pngnx_backup_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ pngnx_vosk_asterisk_target }}"
    dest: "{{ pngnx_vosk_asterisk_target }}.{{ pngnx_backup_suffix }}"
    remote_src: true
    backup: true
  ignore_errors: true

- name: Recursively purge and remove the old source directory (if any.)
  become: true
  when: pngnx_purge_src|default(true)|bool
  ansible.builtin.file:
    path: "{{ pngnx_vosk_asterisk_target }}"
    state: absent

- name: Copy Vosk source from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpvsk.path }}/{{ pngnx_vosk_asterisk_basename }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0700"

- name: Copy Vosk tarball from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpvsk.path }}/{{ pngnx_vosk_asterisk_zip }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    mode: "0400"

- name: Version control the source directory.
  when:
    - pngnx_control_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/git
      - "{{ item.0 }}"
      - "{{ item.1 }}"
      - "{{ item.2 }}"
      - "{{ item.3 }}"
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  loop:
    - { 0: "init",    1: "-q",  2: "-q",             3: "-q" }
    - { 0: "add",     1: ".",   2: "-v",             3: "-v" }
    - { 0: "commit",  1: "-m",  2: "initial import", 3: "--allow-empty" }

- name: Bootstrap Vosk.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - ./bootstrap
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  changed_when: true

- name: Clean Vosk.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  changed_when: true
  ignore_errors: true

- name: Configure Vosk.
  ansible.builtin.command:
    argv:
      - ./configure
      - --with-asterisk={{ pngnx_asterisk_target }}
      - --prefix=/usr
      - "{{ 'CFLAGS=-Og -ggdb3 -pthread' if pngnx_bug_hunter|default(false)|bool else 'CFLAGS=-O2 -pthread' }}"
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  changed_when: true

- name: Make Vosk.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  changed_when: true

- name: Install Vosk.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install
  args:
    chdir: "{{ pngnx_vosk_asterisk_target }}"
  changed_when: true

- name: Copy over default Vosk configuration file for Asterisk.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.copy:
    src: res_speech_vosk.conf
    dest: /etc/asterisk/res_speech_vosk.conf
    force: false
    mode: "0555"

- name: Make sure needed Asterisk modules are loaded in modules.conf
  become: true
  ansible.builtin.lineinfile:
    path: /etc/asterisk/modules.conf
    regexp: "{{ item }}"
    line: "load = {{ item }}"
  loop:
    - res_speech.so
    - res_http_websocket.so
    - res_speech_vosk.so

# SPDX-FileCopyrightText: 2023 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/bigstar.yml

# Downloads, builds, and (if do_asterisk_install is true) installs Asterisk from source.

# TODO: refine the changed_when clauses and generally speed up rebuilds

- name: Make a place for the Asterisk source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.tempfile:
    suffix: ".asterisk-{{ pngnx_asterisk_version }}"
    state: directory
  register: tmpast

- name: Download Asterisk source.
  when:
    - pngnx_new_src|default(true)|bool
    - pngnx_asterisk_minor != "git"
  ansible.builtin.get_url:
    url: "{{ pngnx_asterisk_urlbase }}/{{ pngnx_asterisk_tarball }}"
    dest: "{{ tmpast.path }}/{{ pngnx_asterisk_tarball }}"
    checksum: "{{ pngnx_asterisk_checksum }}"
    mode: "0500"

- name: Unarchive Asterisk source.
  when:
    - pngnx_new_src|default(true)|bool
    - pngnx_asterisk_minor != "git"
  ansible.builtin.unarchive:
    src: "{{ tmpast.path }}/{{ pngnx_asterisk_tarball }}"
    dest: "{{ tmpast.path }}"
    remote_src: true

- name: Pull the Asterisk source into temp dir - via git.
  when:
    - pngnx_new_src|default(true)|bool
    - pngnx_asterisk_minor == "git"
  ansible.builtin.git:
    repo: "{{ pngnx_asterisk_git_repo }}"
    dest: "{{ tmpast.path }}/asterisk-{{ pngnx_asterisk_version }}"
    version: "{{ pngnx_asterisk_major }}"

- name: Backup existing source directory (if any.)
  become: true
  when: pngnx_backup_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ pngnx_asterisk_target }}"
    dest: "{{ pngnx_asterisk_target }}.{{ pngnx_backup_suffix }}"
    remote_src: true
    backup: true
  ignore_errors: true

- name: Recursively purge and remove the old source directory (if any.)
  become: true
  when: pngnx_purge_src|default(true)|bool
  ansible.builtin.file:
    path: "{{ pngnx_asterisk_target }}"
    state: absent

- name: Copy Asterisk source from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpast.path }}/{{ pngnx_asterisk_altname }}-{{ pngnx_asterisk_version }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0700"

- name: Copy Asterisk tarball from temp directory to target install directory.
  become: true
  when:
    - pngnx_new_src|default(true)|bool
    - pngnx_asterisk_minor != "git"
  ansible.builtin.copy:
    src: "{{ tmpast.path }}/{{ pngnx_asterisk_tarball }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    mode: "0400"

- name: Version control the source directory.
  when:
    - pngnx_control_src|default(true)|bool
    - pngnx_asterisk_minor != "git"
  ansible.builtin.command:
    argv:
      - /usr/bin/git
      - "{{ item.0 }}"
      - "{{ item.1 }}"
      - "{{ item.2 }}"
      - "{{ item.3 }}"
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  loop:
    - { 0: "init",    1: "-q",  2: "-q",             3: "-q" }
    - { 0: "add",     1: ".",   2: "-v",             3: "-v" }
    - { 0: "commit",  1: "-m",  2: "initial import", 3: "--allow-empty" }

- name: Update the Asterisk source in target dir - via git.
  when: pngnx_asterisk_minor == "git"
  ansible.builtin.git:
    repo: "{{ pngnx_asterisk_git_repo }}"
    dest: "{{ pngnx_asterisk_target }}"
    update: true

- name: Clean previous Asterisk build. Might not have been one so ignore any errors.
  when: pngnx_new_src|default(true)|bool or pngnx_clean_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - -i
      - distclean
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  register: fail_astdistclean
  failed_when: fail_astdistclean.rc != 0
  changed_when: "'Cleaning' in fail_astdistclean.stdout"

- name: Specify some default build options.
  become: true
  ansible.builtin.copy:
    src: asterisk-{{ pngnx_asterisk_major }}.makeopts
    dest: /etc/asterisk.makeopts
    mode: "0644"

- name: Might not need all these defaults. (But FreePBX uses file-based VoiceMail.)
  become: true
  when: pngnx_voicemail_type is not defined or pngnx_voicemail_type == "files"
  ansible.builtin.lineinfile:
    path: /etc/asterisk.makeopts
    create: true
    regexp: '^MENUSELECT_OPTS_app_voicemail'
    state: absent

# TODO: debug build
- name: Debugging build for big bug hunting.
  become: true
  when: pngnx_bug_hunter|default(false)|bool
  ansible.builtin.lineinfile:
    path: /etc/asterisk.makeopts
    create: true
    regexp: '^MENUSELECT_CFLAGS='
    line: 'MENUSELECT_CFLAGS=DONT_OPTIMIZE COMPILE_DOUBLE DEBUG_THREADS DEBUG_FD_LEAKS BETTER_BACKTRACES BUILD_NATIVE OPTIONAL_API'

- name: Download MP3 source - per Asterisk contrib/scripts/get_mp3_source.sh file. Ignored if already done.
  ansible.builtin.command:
    argv:
      - ./contrib/scripts/get_mp3_source.sh
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  register: fail_mp3source
  failed_when: fail_mp3source.rc > 1
  changed_when: "'appears to already be present' not in fail_mp3source.stdout"

# TODO: ansible.builtin.command: ./configure --libdir=/lib/{{ ansible_architecture }}-linux-gnu --with-pjproject-bundled --with-jansson-bundled
- name: Configure Asterisk source - version 18.
  when: pngnx_asterisk_major == "18"
  ansible.builtin.command:
    argv:
      - ./configure
      - --with-pjproject-bundled
      - --with-jansson-bundled
      - --with-libjwt-bundled
      - "{{ 'CFLAGS=-Og -ggdb3' if pngnx_bug_hunter|default(false)|bool else 'CFLAGS=-O2' }}"
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Configure Asterisk source - version 20.
  when: pngnx_asterisk_major == "20"
  ansible.builtin.command:
    argv:
      - ./configure
      - --with-pjproject-bundled
      - --with-jansson-bundled
      - --with-libjwt-bundled
      - "{{ 'CFLAGS=-Og -ggdb3' if pngnx_bug_hunter|default(false)|bool else 'CFLAGS=-O2' }}"
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Configure Asterisk source - version 21.
  when: pngnx_asterisk_major == "21"
  ansible.builtin.command:
    argv:
      - ./configure
      - --with-pjproject-bundled
      - --with-jansson-bundled
      - --with-libjwt-bundled
      - "{{ 'CFLAGS=-Og -ggdb3' if pngnx_bug_hunter|default(false)|bool else 'CFLAGS=-O2' }}"
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Configure Asterisk source - git.
  when: pngnx_asterisk_minor == "git"
  ansible.builtin.command:
    argv:
      - ./configure
      - --with-pjproject-bundled
      - --with-jansson-bundled
      - --with-libjwt-bundled
      - "{{ 'CFLAGS=-Og -ggdb3' if pngnx_bug_hunter|default(false)|bool else 'CFLAGS=-O2' }}"
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Make the menuselect.makeopts so the Addons can be added.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - menuselect.makeopts
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Fix-up the Asterisk Addons so they get built.
  ansible.builtin.command:
    argv:
      - ./menuselect/menuselect
      - --enable-category
      - MENUSELECT_ADDONS
      - menuselect.makeopts
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Build Asterisk from source. Threaded make.
  ansible.builtin.command:
    argv:
      - /usr/bin/nice
      - -n
      - "{{ nicely | default(0) }}"
      - /usr/bin/make
      - -j
      - "{{ ansible_processor_vcpus | default(2) }}"
      - all
  args:
    chdir: "{{ pngnx_asterisk_target }}"
    creates: "{{ pngnx_asterisk_target }}/main/asterisk"

- name: Build Asterisk from source. Single make. Sometimes needed if threaded make fails due to improper ordering of objects between threads.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - all
  args:
    chdir: "{{ pngnx_asterisk_target }}"
    creates: "{{ pngnx_asterisk_target }}/main/asterisk"
  changed_when: true

- name: Wipe out the old modules.
  become: true
  when:
    - pngnx_do_asterisk_install|default(true)|bool
    - pngnx_clean_asterisk_modules|default(true)|bool
  ansible.builtin.file:
    path: /usr/lib/asterisk/modules/
    state: absent

- name: Install Asterisk.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

- name: Install Asterisk headers.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install-headers
  args:
    chdir: "{{ pngnx_asterisk_target }}"
  changed_when: true

# SPDX-FileCopyrightText: 2023 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/firewall-ufw.yml

# Careful!
- name: Reset UFW.
  become: true
  ansible.builtin.ufw:
    state: reset

- name: Disable IPv6 support in UFW.
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: '^IPV6'
    line: 'IPV6=no'

- name: Enable various helpers for firewalled traversal of services.
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/ufw
    regexp: '^IPT_MODULES'
    line: 'IPT_MODULES="nf_conntrack_ftp nf_nat_ftp nf_conntrack_tftp nf_nat_tftp nf_conntrack_netbios_ns"'

- name: Initially allow everything and enable UFW with logging.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    state: enabled
    policy: allow
    logging: full

# TODO: fix this bug in Ansible - only 'in' or 'out' work not full 'incoming' or 'outgoing' as per the docs online
# BUT is superflous anyhow as default UFW always allows in/out traffic on the loopback
#- name: Loopback always works.
#  become: true
#  ufw:
#    rule: allow
#    interface: lo
#    direction: "{{ item }}"
#  loop:
#    - incoming
#    - outgoing

- name: Remove previous SSH limits on default port.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: '22'
    proto: tcp
    delete: true
 
- name: Limit SSH attempts on potentially non-standard port if defined in host/group variables.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_ssh_port | default('22') }}"
    proto: tcp
    log: true
    comment: Allow limited SSH.

- name: Only certain IPs can make IAX attempts.
  when: pngnx_iax_hosts is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_iax_port | default('4569') }}"
    proto: udp
    from: "{{ item }}"
    log: false
    comment: Allow IAX (a VoiP protocol) for communicating with other PBXes.
  loop: "{{ pngnx_iax_hosts }}"

- name: Limit SIP UDP attempts on the LAN/VPNs.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_sip_port_range | default('5060:5069') }}"
    src: "{{ itemx }}"
    proto: udp
    log: true
    comment: Allow limited SIP via UDP for phone signal layer on LAN/VPNs.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Limit SIP TCP attempts on the LAN/VPNs.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_sip_port_range | default('5060:5069') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    comment: Allow limited SIP via TCP for phone signal layer on LAN/VPNs.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Open RTP to the LAN/VPNs.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_rtp_port_range | default('10000:20000') }}"
    src: "{{ itemx }}"
    proto: udp
    log: false
    comment: Allow RTP for phone media channels on LAN/VPNs.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Open RTP for T38 FAX to the LAN/VPNs.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_t38_port_range | default('4000:4999') }}"
    src: "{{ itemx }}"
    proto: udp
    log: false
    comment: Allow RTP for T38 FAX on LAN/VPNs.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Apache might get in on HTTP 80. Allow from friendlies/LAN/VPNs because GUI is a hog with requests.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_http_port | default('80') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: false
    comment: Allow friendly/LAN/VPNs access to the PBX Webserver - HTTP.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Apache might get in on HTTPS 443. Allow from friendlies/LAN/VPNs because GUI is a hog with requests.
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_https_port | default('443') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: false
    comment: Allow friendly/LAN/VPNs access to the PBX Webserver - HTTPS.
  loop: "{{ pngnx_friendly_lans if pngnx_friendly_lans is defined else (ansible_default_ipv4.network + '/' + ansible_default_ipv4.netmask)| | split }}"
  loop_control:
    loop_var: itemx

- name: Limit SIP UDP attempts on the VLANs.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_sip_port_range | default('5060:5069') }}"
    src: "{{ itemx }}"
    proto: udp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow limited SIP via UDP for phone signal layer on VLANs.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Limit SIP TCP attempts on the VLANs.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_sip_port_range | default('5060:5069') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow limited SIP via TCP for phone signal layer on VLANs.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Open RTP to the VLANs.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_rtp_port_range | default('10000:20000') }}"
    src: "{{ itemx }}"
    proto: udp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow RTP for phone media channels on VLANs.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Open RTP for T38 FAX to the VLANs.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_t38_port_range | default('4000:4999') }}"
    src: "{{ itemx }}"
    proto: udp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow RTP for T38 FAX on VLANs.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Apache might get in on HTTP 80. Allow from friendlies/VLANs because GUI is a hog with requests.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_http_port | default('80') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow VLANs access to the PBX Webserver - HTTP.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Apache might get in on HTTPS 443. Allow from friendlies/VLANs because GUI is a hog with requests.
  become: true
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_https_port | default('443') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow VLANs access to the PBX Webserver - HTTPS.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Asterisk serves up phone provisioning on 8088 usually (but we might be proxying). Limit it to VLAN if defined; otherwise, the LAN. And log it!
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_phoneprov_proxy_port | default(pngnx_phoneprov_port | default('8088')) }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow access to the PBX phone provisioning server to the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Asterisk serves up phone provisioning on 8088 usually (but might be proxying). Trying it on the LAN if no VLAN. Log it!
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is not defined
    - pngnx_friendly_lans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_phoneprov_proxy_port | default(pngnx_phoneprov_port | default('8088')) }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    comment: Limit access to the PBX phone provisioning server to the friendly nets.
  loop: "{{ pngnx_friendly_lans }}"
  loop_control:
    loop_var: itemx

- name: Phone book might be proxied. VLAN check.
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: "{{ pngnx_phonebook_proxy_port | default('8088') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Allow access to the PBX phone book server to the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Phone book might be proxied. LAN check.
  when:
    - pngnx_phoneprov
    - pngnx_phone_vlans is not defined
    - pngnx_friendly_lans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: "{{ pngnx_phonebook_proxy_port | default('8088') }}"
    src: "{{ itemx }}"
    proto: tcp
    log: true
    comment: Limit access to the PBX phone book server to the friendly nets.
  loop: "{{ pngnx_friendly_lans }}"
  loop_control:
    loop_var: itemx

- name: Acting as NTP server only on VLAN, if defined.
  when: pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: 123
    src: "{{ itemx }}"
    proto: udp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: ChronyD NTP service. On the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Acting as NTP server on the friendly local networks, if no VLAN.
  when:
    - pngnx_phone_vlans is not defined
    - pngnx_friendly_lans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: 123
    src: "{{ itemx }}"
    proto: udp
    log: false
    comment: ChronyD NTP service. On friendly nets.
  loop: "{{ pngnx_friendly_lans }}"
  loop_control:
    loop_var: itemx

- name: TFTP gets in on 69. VLAN vs friendly nets. Very Limited. Logged!
  when: pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: 69
    src: "{{ itemx }}"
    proto: udp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: TFTP for phone provisioning. On the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: TFTP gets in on 69. VLAN vs friendly nets. Very Limited. Logged!
  when:
    - pngnx_phone_vlans is not defined
    - pngnx_friendly_lans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: limit
    port: 69
    src: "{{ itemx }}"
    proto: udp
    log: true
    comment: TFTP for phone provisioning. On friendly nets.
  loop: "{{ pngnx_friendly_lans }}"
  loop_control:
    loop_var: itemx

- name: Run DNS server on VLAN, if any.
  when: pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: 53
    src: "{{ itemx }}"
    proto: udp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: DNS server on the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Run DHCP server on VLAN, if any.
  when: pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: 67
    proto: udp
    log: true
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: DHCP server on the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Accept syslog from phones on VLAN, if any.
  when: pngnx_phone_vlans is defined
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    rule: allow
    port: 514
    proto: udp
    log: false
    interface: "{{ pngnx_vlan_interface }}.{{ pngnx_vlan_id }}"
    direction: in
    comment: Phone syslogs on the VLAN.
  loop: "{{ pngnx_phone_vlans }}"
  loop_control:
    loop_var: itemx

- name: Switch from Allow to Deny default policy. This disallows everything else not explicity allowed already. Double-check SSH still works!
  become: true
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  ansible.builtin.ufw:
    state: enabled
    policy: deny
    logging: low

- name: Enable UFW service.
  become: true
  ansible.builtin.service:
    name: ufw
    enabled: true
    state: started
 

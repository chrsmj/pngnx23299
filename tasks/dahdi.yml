# SPDX-FileCopyrightText: 2023 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/dahdi.yml

# Downloads, builds, and installs DAHDI Linux from source.

- name: Make a place for the DAHDI source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.tempfile:
    suffix: ".dahdi"
    state: directory
  register: tmpdahdi

- name: Download DAHDI Linux source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.get_url:
    url: "{{ pngnx_dahdilinux_urlbase }}/{{ pngnx_dahdilinux_tarball }}"
    dest: "{{ tmpdahdi.path }}/{{ pngnx_dahdilinux_tarball }}"
    checksum: "{{ pngnx_dahdilinux_checksum }}"
    mode: "0500"

- name: Unarchive DAHDI Linux source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.unarchive:
    src: "{{ tmpdahdi.path }}/{{ pngnx_dahdilinux_tarball }}"
    dest: "{{ tmpdahdi.path }}"
    remote_src: true

- name: Copy DAHDI Linux source from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpdahdi.path }}/dahdi-linux-{{ pngnx_dahdilinux_version }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0700"

- name: Copy DAHDI Linux tarball from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpdahdi.path }}/{{ pngnx_dahdilinux_tarball }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    mode: "0400"

- name: Clean previous DAHDI Linux build.
  when: pngnx_new_src|default(true)|bool or pngnx_clean_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - -i
      - clean
  args:
    chdir: "{{ pngnx_dahdilinux_target }}"
  register: fail_dahdiclean
  failed_when: fail_dahdiclean.rc != 0
  changed_when: "'CLEAN' in fail_dahdiclean.stdout"

# TODO: maybe: make -j {{ ansible_processor_count | default(2) }} all
- name: Build DAHDI Linux from source. If this fails please reboot - kernel is probably out of date.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - -j
      - "{{ ansible_processor_vcpus | default(2) }}"
      - all
  args:
    chdir: "{{ pngnx_dahdilinux_target }}"
    creates: "{{ pngnx_dahdilinux_target }}/linux/drivers/dahdi/Module.symvers"
  changed_when: true

- name: Install DAHDI Linux.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - all
      - install-modules
      - install-include
  args:
    chdir: "{{ pngnx_dahdilinux_target }}"
  changed_when: true

- name: Install DAHDI Linux non-free firmware.
  become: true
  tags: [never, nonfree]
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install-firmware
      - install-xpp-firm
  args:
    chdir: "{{ pngnx_dahdilinux_target }}"
  changed_when: true

- name: Load DAHDI Linux module (TODO what happened to dahdi_dummy ?)
  become: true
  ansible.builtin.command:
    argv:
      - /sbin/modprobe
      - dahdi

- name: Download DAHDI Tools source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.get_url:
    url: "{{ pngnx_dahditools_urlbase }}/{{ pngnx_dahditools_tarball }}"
    dest: "{{ tmpdahdi.path }}/{{ pngnx_dahditools_tarball }}"
    checksum: "{{ pngnx_dahditools_checksum }}"

- name: Unarchive DAHDI Tools source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.unarchive:
    src: "{{ tmpdahdi.path }}/{{ pngnx_dahditools_tarball }}"
    dest: "{{ tmpdahdi.path }}"
    remote_src: true

- name: Copy DAHDI Tools source from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpdahdi.path }}/dahdi-tools-{{ pngnx_dahditools_version }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"

- name: Copy DAHDI Tools tarball from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpdahdi.path }}/{{ pngnx_dahditools_tarball }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true

- name: Clean previous DAHDI Tools build.
  when: pngnx_new_src|default(true)|bool or pngnx_clean_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - -i
      - clean
    removes: Makefile
  args:
    chdir: "{{ pngnx_dahditools_target }}"
  register: fail_dahditoolsclean
  failed_when: fail_dahditoolsclean.rc != 0
  changed_when: true

- name: Re-Configure the Configure script for DAHDI Tools.
  when: pngnx_new_src|default(true)|bool or pngnx_clean_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - autoreconf
      - -i
  args:
    chdir: "{{ pngnx_dahditools_target }}"
    creates: "{{ pngnx_dahditools_target }}/configure"
  register: fail_dahditoolsreconf
  failed_when: fail_dahditoolsreconf.rc != 0
  changed_when: true

- name: Configure DAHDI Tools.
  when: pngnx_new_src|default(true)|bool or pngnx_clean_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - ./configure
  args:
    chdir: "{{ pngnx_dahditools_target }}"
  register: fail_dahditoolsconfigure
  failed_when: fail_dahditoolsconfigure.rc != 0
  changed_when: true

# TODO: maybe: make -j {{ ansible_processor_count | default(2) }} all
- name: Build DAHDI Tools from source. If this fails please reboot - kernel is out of date.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - -j
      - "{{ ansible_processor_vcpus | default(2) }}"
      - all
  args:
    chdir: "{{ pngnx_dahditools_target }}"
  changed_when: true

- name: Install DAHDI Tools.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install
  args:
    chdir: "{{ pngnx_dahditools_target }}"
  changed_when: true

- name: Install DAHDI using DKMS so it will work if the kernel changes.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - ./build_tools/dkms-helper
      - add
  args:
    chdir: "{{ pngnx_dahdilinux_target }}"
  register: fail_dkms
  failed_when: fail_dkms.rc > 1
  changed_when: "'DKMS tree already contains' not in fail_dkms.stdout"

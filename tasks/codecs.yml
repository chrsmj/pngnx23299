# SPDX-FileCopyrightText: 2023 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/codecs.yml

# Downloads and installs non-free codecs from Digium.

# TODO: remove old asterisk modules from /usr/lib/asterisk/modules/ when upgrading major versions

- name: Download extra codecs from Digium server (OPUS, SIREN, etc.).
  tags: nonfree
  ansible.builtin.get_url:
    url: "{{ digium_urlbase }}/codec_{{ item }}/asterisk-{{ asterisk_major }}.0/{{ ansible_userspace_architecture|replace('_','-') }}/codec_{{ item }}-{{ asterisk_major }}.0_current-{{ ansible_userspace_architecture }}.tar.gz"
    dest: /tmp/codec_{{ item }}.tar.gz
  with_items: "{{ digium_codecs }}"

- name: Download versioning info for extra codecs from Digium server (OPUS, SIREN, etc.).
  tags: nonfree
  ansible.builtin.get_url:
    url: "{{ digium_urlbase }}/codec_{{ item }}/selector-{{ item }}.js"
    dest: /tmp/selector-{{ item }}.js
  with_items: "{{ digium_codecs }}"

- name: Register variables for the codec versions.
  tags: nonfree
  ansible.builtin.command: /usr/bin/grep -m 1 version /tmp/selector-{{ item }}.js
  register: vcodecs
  with_items: "{{ digium_codecs }}"

- name: Register variables for the codec source names combined with their version numbers. Quietly.
  tags: nonfree
  no_log: true
  ansible.builtin.command: /usr/bin/echo codec_{{ item.0 }}-{{ asterisk_major }}.0_{{ item.1.stdout|regex_replace('[^0-9.]+','') }}-{{ ansible_userspace_architecture }}
  register: vcodecsources
  with_together:
    - "{{ digium_codecs }}"
    - "{{ vcodecs.results }}"

- name: Unarchive codec sources.
  tags: nonfree
  ansible.builtin.unarchive:
    src: /tmp/codec_{{ item }}.tar.gz
    dest: /tmp
    remote_src: true
  with_items: "{{ digium_codecs }}"

- name: Copy codec sources from temp directory to target install directory. Quietly.
  become: yes
  tags: nonfree
  no_log: true
  when: new_src
  ansible.builtin.copy:
    src: /tmp/{{ item.stdout }}
    dest: "{{ build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  with_items: "{{ vcodecsources.results }}"

- name: Copy codec tarballs from temp directory to target install directory.
  become: yes
  tags: nonfree
  when: new_src
  ansible.builtin.copy:
    src: /tmp/codec_{{ item }}.tar.gz
    dest: "{{ build_target }}"
    remote_src: true
  with_items: "{{ digium_codecs }}"

- name: Install extra codecs. Quietly.
  become: yes
  tags: nonfree
  no_log: true
  ansible.builtin.copy:
    src: "{{ build_target }}/{{ item.0.stdout }}/codec_{{ item.1 }}.so"
    dest: /usr/lib/asterisk/modules
    remote_src: true
  with_together:
    - "{{ vcodecsources.results }}"
    - "{{ digium_codecs }}"

- name: Install extra formats. Quietly. Really only OGG OPUS - others will fail and that is okay.
  become: yes
  tags: nonfree
  no_log: true
  ansible.builtin.copy:
    src: "{{ build_target }}/{{ item.0.stdout }}/format_ogg_{{ item.1 }}.so"
    dest: /usr/lib/asterisk/modules
    remote_src: true
  with_together:
    - "{{ vcodecsources.results }}"
    - "{{ digium_codecs }}"
  ignore_errors: yes


# SPDX-FileCopyrightText: 2023-2024 Penguin PBX Solutions <chris at penguin p b x dot com>
#
# SPDX-License-Identifier: GPL-3.0-or-later
---
# file: roles/pngnx23299/tasks/tts-flite.yml

# Text-To-Speech using third-party Flite for Asterisk application

# TODO
# - name: Generate default Flite configuration file for Asterisk.

# TODO
# - name: Provide helper dial plan for Flite (extensions_pngnpbx_tts_flite.conf)

- name: Extra packages for Flite.
  become: true
  ansible.builtin.apt:
    state: present
    name:
      - flite
      - flite1-dev

- name: Make a place for the Flite source.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.tempfile:
    suffix: ".flite-asterisk"
    state: directory
  register: tmpflt

- name: Download Flite.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.get_url:
    url: "{{ pngnx_flite_asterisk_urlbase }}"
    dest: "{{ tmpflt.path }}/{{ pngnx_flite_asterisk_zip }}"
    mode: "0500"

- name: Unarchive Flite.
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.unarchive:
    src: "{{ tmpflt.path }}/{{ pngnx_flite_asterisk_zip }}"
    dest: "{{ tmpflt.path }}"
    remote_src: true

- name: Backup existing source directory (if any.)
  become: true
  when: pngnx_backup_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ pngnx_flite_asterisk_target }}"
    dest: "{{ pngnx_flite_asterisk_target }}.{{ pngnx_backup_suffix }}"
    remote_src: true
    backup: true
  ignore_errors: true

- name: Recursively purge and remove the old source directory (if any.)
  become: true
  when:
    - pngnx_purge_src|default(true)|bool
  ansible.builtin.file:
    path: "{{ pngnx_flite_asterisk_target }}"
    state: absent

- name: Copy Flite source from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpflt.path }}/{{ pngnx_flite_asterisk_basename }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: "0700"

- name: Copy Flite tarball from temp directory to target install directory.
  become: true
  when: pngnx_new_src|default(true)|bool
  ansible.builtin.copy:
    src: "{{ tmpflt.path }}/{{ pngnx_flite_asterisk_zip }}"
    dest: "{{ pngnx_build_target }}"
    remote_src: true
    mode: "0400"

- name: Version control the source directory.
  when:
    - pngnx_control_src|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/git
      - "{{ item.0 }}"
      - "{{ item.1 }}"
      - "{{ item.2 }}"
      - "{{ item.3 }}"
  args:
    chdir: "{{ pngnx_flite_asterisk_target }}"
  loop:
    - { 0: "init",    1: "-q",  2: "-q",             3: "-q" }
    - { 0: "add",     1: ".",   2: "-v",             3: "-v" }
    - { 0: "commit",  1: "-m",  2: "initial import", 3: "--allow-empty" }

- name: Clean Flite.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - clean
  args:
    chdir: "{{ pngnx_flite_asterisk_target }}"
  changed_when: true
  ignore_errors: true

- name: Make Flite.
  ansible.builtin.command:
    argv:
      - /usr/bin/make
  args:
    chdir: "{{ pngnx_flite_asterisk_target }}"
  changed_when: true

- name: Install Flite.
  become: true
  when: pngnx_do_asterisk_install|default(true)|bool
  ansible.builtin.command:
    argv:
      - /usr/bin/make
      - install
  args:
    chdir: "{{ pngnx_flite_asterisk_target }}"
  changed_when: true

- name: Make sure needed Asterisk modules are loaded in modules.conf
  become: true
  ansible.builtin.lineinfile:
    path: /etc/asterisk/modules.conf
    regexp: "{{ item }}"
    line: "load = {{ item }}"
  loop:
    - app_flite.so
